syntax = "proto3";

package kismatic.token;
option go_package = "pb";

import "google/protobuf/any.proto";

enum TOKEN_VERSION {
  UNKNOWN = 0; // required for proto3
  V1      = 1;
}

// Token represents a set of assertions relative to a
// username. The bearer of the token can sign requests
// for authorization rights that are implied by the
// underlying assertions.
message Token {
  TOKEN_VERSION version                        = 1;
  string       username                        = 2;
  oneof assertions {
    StringAssertions     string_assertions     = 4;
    StructuredAssertions structured_assertions = 5;
  }
}

// StringAssertions is a stupid wrapper required by
// proto3 syntax.
message StringAssertions {
  map<string, string> assertions            = 1;
}

// StructuredAssertions is idem, but for assertions
// that may take the form of some other protobuf.
message StructuredAssertions {
  map<string, google.protobuf.Any>    structured_assertions = 1;
}

// LDAPAssertion
message LDAPAssertion {
  StringAssertions ldap_attributes = 1;
}

// SignedToken is not encrypted, mainly because it makes it
// rather difficult for other people to understand what it's
// doing. If these tokens will be used in a public cloud,
// where it is reasonable to assume a global passive adversary,
// you almost certainly want encrypted signed tokens (not
// implemented in this library at the moment).
message SignedToken {
  Token token     = 1;
  bytes signature = 2;
  bytes opaque    = 3;
}

/* Basic example, predicates 

{"username": "dlg",
 "structured_assertions":
   {"LDAP": 
     {"@type": "LDAPAssertions",
      "ldap_attributes":
        {"OU": "cto_office",
         "DN": "CN=dlg,DC=kismatic,DC=io",
        },
      {"@type": "OperationalRoleDatabaseAssertion":
        "or_roles": ["developer"] // useless example
      }
    }
  }
*/
